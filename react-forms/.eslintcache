[{"C:\\Users\\HP\\Desktop\\react-forms\\src\\index.js":"1","C:\\Users\\HP\\Desktop\\react-forms\\src\\App.js":"2","C:\\Users\\HP\\Desktop\\react-forms\\src\\components\\SimpleInput.js":"3","C:\\Users\\HP\\Desktop\\react-forms\\src\\hooks\\use-input.js":"4","C:\\Users\\HP\\Desktop\\react-forms\\src\\components\\BasicForm.js":"5","C:\\Users\\HP\\Desktop\\react-forms\\src\\hooks\\use-form.js":"6"},{"size":179,"mtime":1648643023000,"results":"7","hashOfConfig":"8"},{"size":244,"mtime":1661343545196,"results":"9","hashOfConfig":"8"},{"size":4226,"mtime":1661340987369,"results":"10","hashOfConfig":"8"},{"size":814,"mtime":1661340686421,"results":"11","hashOfConfig":"8"},{"size":3361,"mtime":1661359644577,"results":"12","hashOfConfig":"8"},{"size":1530,"mtime":1661404308578,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1pk1piw",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\HP\\Desktop\\react-forms\\src\\index.js",[],["29","30"],"C:\\Users\\HP\\Desktop\\react-forms\\src\\App.js",["31"],"import SimpleInput from './components/SimpleInput';\nimport BasicForm from './components/BasicForm';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* <SimpleInput /> */}\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\HP\\Desktop\\react-forms\\src\\components\\SimpleInput.js",["32","33"],"import { useState, useRef, useEffect } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: name, \n    valueIsValid:nameInputIsValid, \n    valueIsTouched: nameIsTouched,\n    hasError: nameHasError,\n    onValueChangeHandler: onNameChangeHandler,\n    onValueBlurHandler: onNameBlurHandler,\n    reset: resetHandler\n  } = useInput((value) => value.trim() !== \"\");\n  // const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  // const [error, setError] = useState(false);\n  // const [nameIsTouched, setNameIsTouched] = useState(false);\n  const [emailIsTouched, setEmailIsTouched] = useState(false);\n  // const [formIsValid, setFormIsValid] = useState(false);\n  const nameRef = useRef();\n\n  const validateEmail = (email) => {\n    return String(email)\n      .toLowerCase()\n      .match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      );\n  };\n\n  // const nameInputIsValid = ( name.toLowerCase() === \"romil\" && name !== \"\");\n  const emailInputIsValid = validateEmail(email);\n\n  let formIsValid = false;\n  if (nameInputIsValid && emailInputIsValid){\n    formIsValid = true;\n  }\n  // useEffect(() => {\n  //   if (nameInputIsValid) {\n  //     setFormIsValid(true);\n  //   }\n  //   else{\n  //     setFormIsValid(false);\n  //   }\n  // }, [nameInputIsValid]); // we can do this for multiple form fields\n\n  // const onNameChangeHandler = (event) => {\n  //   setName(event.target.value);\n  //   setNameIsTouched(true);\n\n    // we used event.target.value instead of name here? \n    //because after setting a state it goes to scheduling state and we can't use this updated state instantly\n    // if (event.target.value.toLowerCase() === \"romil\") {\n    //   setError(false);\n    //   return;\n    // }\n    // setError(true);\n  // }\n\n  const onEmailChnageHandler = (event) => {\n    setEmail(event.target.value);\n    setEmailIsTouched(true);\n  }\n\n  // const onNameBlurHandler = () => {\n  //   setNameIsTouched(true);\n    // if (name.toLowerCase() !== \"romil\" || name.trim() === \"\") {\n    //   setError(true);\n    //   return;\n    // }\n  // }\n\n  const onEmailBlurHandler = () => {\n    setEmailIsTouched(true);\n  }\n\n  const onSubmitHandler = (event) => {\n    event.preventDefault();\n    // setNameIsTouched(true);\n    // const nameFromRef = nameRef.current.value;\n    // if (nameFromRef.toLowerCase() !== \"romil\" || nameFromRef.trim() === \"\") {\n    //   setError(true);\n    //   return;\n    // }\n    if (nameInputIsValid){\n      alert(name);\n      \n      // setError(false);\n      // setName(\"\") // better approach for reseting input values\n      // nameRef.current.value = ''; // not ideal, can't manipulate the dom let react do this own\n\n      // setNameIsTouched(false);\n      resetHandler();\n    }\n    setEmail(\"\");\n    setEmailIsTouched(false);   \n  }\n\n  // const nameIsInvalid = error && nameIsTouched;\n  // const nameIsInvalid = !nameInputIsValid && nameIsTouched;\n  const emailIsInvalid = !emailInputIsValid && emailIsTouched;\n  const inputFormClasses = nameHasError ? \"form-control invalid\" : \"form-control\";\n  const emailFormClasses = emailIsInvalid ? \"form-control invalid\" : \"form-control\";\n\n  return (\n    <form onSubmit={onSubmitHandler}>\n      <div className={inputFormClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n          type='text'\n          id='name'\n          onChange={onNameChangeHandler}\n          onBlur={onNameBlurHandler}\n          ref={nameRef}\n          value={name}\n        />\n        {nameHasError && <p className=\"error-text\">Name is not Correct.</p>}\n      </div>\n      <div className={emailFormClasses}>\n        <label htmlFor='email'>Your Email</label>\n        <input\n          type='text'\n          id='email' \n          onChange={onEmailChnageHandler}   \n          onBlur={onEmailBlurHandler}\n          value={email}      \n        />\n        {emailIsInvalid && <p className=\"error-text\">Email is not Correct.</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n","C:\\Users\\HP\\Desktop\\react-forms\\src\\hooks\\use-input.js",[],"C:\\Users\\HP\\Desktop\\react-forms\\src\\components\\BasicForm.js",[],"C:\\Users\\HP\\Desktop\\react-forms\\src\\hooks\\use-form.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":8,"nodeType":"40","messageId":"41","endLine":1,"endColumn":19},{"ruleId":"38","severity":1,"message":"42","line":1,"column":28,"nodeType":"40","messageId":"41","endLine":1,"endColumn":37},{"ruleId":"38","severity":1,"message":"43","line":8,"column":21,"nodeType":"40","messageId":"41","endLine":8,"endColumn":34},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'SimpleInput' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'nameIsTouched' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]